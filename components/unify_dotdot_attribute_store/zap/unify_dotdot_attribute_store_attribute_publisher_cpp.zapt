/******************************************************************************
 * # License
 * <b>Copyright 2022 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/
// clang-format off
{{zap_header}}  // clang-format on
#include "unify_dotdot_attribute_store.h"
#include "unify_dotdot_attribute_store_attribute_publisher.h"
#include "unify_dotdot_attribute_store_helpers.h"
#include "unify_dotdot_attribute_store_configuration.h"
#include "unify_dotdot_defined_attribute_types.h"

// Unify Components
#include "attribute_store_helper.h"
#include "attribute.hpp"
#include "dotdot_mqtt.h"

// Generic includes
#include <string>

#include "sl_log.h"
#define LOG_TAG "unify_dotdot_attribute_store_attribute_publisher"

// clang-format off
{{#zcl_clusters}}
{{#if (supportedCluster label)}}

/**
 * @brief Publishes the desired value of an updated attribute store node for
 * the {{label}} cluster.
 * @param updated_node Updated attribute store node
 * @param change       Type of change applied
 */
static void {{asSnakeCaseLower label}}_cluster_publish_desired_value_callback(
   attribute_store_node_t updated_node, attribute_store_change_t change)
{
  // clang-format on
  if (false == is_publish_desired_attribute_values_to_mqtt_enabled()) {
    return;
  }
  if (change == ATTRIBUTE_DELETED || change == ATTRIBUTE_CREATED) {
    return;
  }
  // Scene exception: check that the attribute is not under the Scene Table extension, which is a config and not the node's state.
  if (ATTRIBUTE_STORE_INVALID_NODE
      != attribute_store_get_first_parent_with_type(
        updated_node,
        DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE)) {
    return;
  }

  // Get the UNID and EndPoint, and prepare the basic topic
  char unid[MAXIMUM_UNID_SIZE]     = {};
  // clang-format off
  {{#if (clusterWithoutEndpoints label)}}
  // clang-format on
  if (SL_STATUS_OK != unify_dotdot_attributes_get_unid()(updated_node, unid)) {
    return;
  }
  // clang-format off
  {{else}}
  // clang-format on
  dotdot_endpoint_id_t endpoint_id = 0;
  if (SL_STATUS_OK
      != unify_dotdot_attributes_get_unid_endpoint()(updated_node,
                                                     unid,
                                                     &endpoint_id)) {
    return;
  }
  // clang-format off
  {{/if}}
  // clang-format on

  std::string base_topic = "ucl/by-unid/" + std::string(unid);
  // clang-format off
  {{#unless (clusterWithoutEndpoints label)}}
  base_topic += "/ep" + std::to_string(endpoint_id);
  {{/unless}}
  // clang-format on

  attribute_store_type_t type = attribute_store_get_node_type(updated_node);
  if (type == ATTRIBUTE_STORE_INVALID_ATTRIBUTE_TYPE) {
    sl_log_debug(LOG_TAG,
                 "Warning: Invalid type for Attribute ID %d, "
                 "this should not happen.",
                 updated_node);
    return;
  }

  // If the value got updated but both Reported and Desired undefined, we skip publication
  if (false == attribute_store_is_reported_defined(updated_node)
      && false == attribute_store_is_desired_defined(updated_node)) {
    sl_log_debug(LOG_TAG,
                 "Reported/Desired values are undefined. "
                 "Skipping publication");
    return;
  }

  // clang-format off
  try {
    attribute_store::attribute attr(updated_node);
  {{#zcl_attributes}}
    {{#if (isMonotonousArray label)}}
    // Skip attribute {{label}} because it is an array,
    // we typically don't save them as array in the attribute store.
    sl_log_debug(LOG_TAG,"Warning: Cannot publish desired value for attribute {{parent.label}} {{label}}. Arrays are not supported");
    {{else if (isStruct type)}}
    // Skip attribute {{label}} because it is a struct,
    // we typically don't save them as structs in the attribute store.
    sl_log_debug(LOG_TAG,"Warning: Cannot publish desired value for attribute {{parent.label}} {{label}}. Structs are not supported");
    {{else}}
      if (type == {{asAttributeIdDefine parent.label label}}) {
        {{#if (isString type)}}
          std::vector<char> str_desired = attr.desired_or_reported<std::vector<char>>();
          {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
            base_topic.c_str(),
            static_cast<{{asUnderlyingType type}}>(str_desired.data()),
            UCL_MQTT_PUBLISH_TYPE_DESIRED);
        {{else}}
          {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
            base_topic.c_str(),
            static_cast<{{asUnderlyingType type}}>(attr.desired_or_reported<{{asUnderlyingType type}}>()),
            UCL_MQTT_PUBLISH_TYPE_DESIRED);
        {{/if}}
        return;
      }
    {{/if}}
    {{/zcl_attributes}}
  } catch (std::exception &ex) {
    sl_log_warning(LOG_TAG, "Failed to publish the Desired attribute value: %s", ex.what());
  }
}

/**
 * @brief Publishes the reported value of an updated attribute store node for
 * the {{label}} cluster.
 * @param updated_node Updated attribute store node
 * @param change       Type of change applied
 */
static void {{asSnakeCaseLower label}}_cluster_publish_reported_value_callback(
   attribute_store_node_t updated_node, attribute_store_change_t change)
{
  // clang-format on
  if (false == is_publish_reported_attribute_values_to_mqtt_enabled()) {
    return;
  }
  if (change == ATTRIBUTE_CREATED) {
    return;
  }
  // Scene exception: check that the attribute is not under the Scene Table extension, which is a config and not the node's state.
  if (ATTRIBUTE_STORE_INVALID_NODE
      != attribute_store_get_first_parent_with_type(
        updated_node,
        DOTDOT_ATTRIBUTE_ID_SCENES_SCENE_TABLE)) {
    return;
  }

  // Get the UNID and EndPoint, and prepare the basic topic
  char unid[MAXIMUM_UNID_SIZE]     = {};
  // clang-format off
  {{#if (clusterWithoutEndpoints label)}}
  // clang-format on
  if (SL_STATUS_OK != unify_dotdot_attributes_get_unid()(updated_node, unid)) {
    return;
  }
  // clang-format off
  {{else}}
  // clang-format on
  dotdot_endpoint_id_t endpoint_id = 0;
  if (SL_STATUS_OK
      != unify_dotdot_attributes_get_unid_endpoint()(updated_node,
                                                     unid,
                                                     &endpoint_id)) {
    return;
  }
  // clang-format off
  {{/if}}
  // clang-format on

  std::string base_topic = "ucl/by-unid/" + std::string(unid);
  // clang-format off
  {{#unless (clusterWithoutEndpoints label)}}
  base_topic += "/ep" + std::to_string(endpoint_id);
  {{/unless}}
  // clang-format on

  attribute_store_type_t type = attribute_store_get_node_type(updated_node);
  if (type == ATTRIBUTE_STORE_INVALID_ATTRIBUTE_TYPE) {
    sl_log_debug(LOG_TAG,
                 "Warning: Invalid type for Attribute ID %d, "
                 "this should not happen.",
                 updated_node);
    return;
  }

  // Deletion case:
  if (change == ATTRIBUTE_DELETED) {
    // clang-format off
    switch(type) {
   {{#zcl_attributes}}
     case {{asAttributeIdDefine parent.label label}}:
        // clang-format on
        sl_log_debug(LOG_TAG,
                     "Unretaining {{parent.label}}::{{label}} under topic %s",
                     base_topic.c_str());
        // clang-format off
      {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_unretain(base_topic.c_str(), UCL_MQTT_PUBLISH_TYPE_ALL);
      break;
    {{/zcl_attributes}}
    default:
    break;
    }
    // clang-format on
    return;
  }

  // If the value got updated but undefined, we skip publication
  if (false == attribute_store_is_reported_defined(updated_node)) {
    sl_log_debug(LOG_TAG, "Reported value is undefined. Skipping publication");
    return;
  }

  // Else we assume update case:
  // clang-format off
  try {
    attribute_store::attribute attr(updated_node);
  {{#zcl_attributes}}
    {{#if (isMonotonousArray label)}}
    // Skip attribute {{label}} because it is an array,
    // we typically don't save them as array in the attribute store.
    sl_log_debug(LOG_TAG,"Warning: Cannot publish reported value for attribute {{parent.label}} {{label}}. Arrays are not supported");
    {{else if (isStruct type)}}
    // Skip attribute {{label}} because it is a struct,
    // we typically don't save them as structs in the attribute store.
    sl_log_debug(LOG_TAG,"Warning: Cannot publish reported value for attribute {{parent.label}} {{label}}. Structs are not supported");
    {{else}}
      if (type == {{asAttributeIdDefine parent.label label}}) {
        {{#if (isString type)}}
          std::vector<char> str_desired = attr.reported<std::vector<char>>();
          {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
            base_topic.c_str(),
            static_cast<{{asUnderlyingType type}}>( str_desired.data() ),
            (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
        {{else}}
          {{dotdot_prefix}}_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_publish(
            base_topic.c_str(),
            static_cast<{{asUnderlyingType type}}>(attr.reported<{{asUnderlyingType type}}>()),
            (attr.desired_exists() && !attribute_store_is_value_matched(updated_node)) ? UCL_MQTT_PUBLISH_TYPE_REPORTED : UCL_MQTT_PUBLISH_TYPE_ALL);
        {{/if}}
        return;
      }
    {{/if}}
    {{/zcl_attributes}}
  } catch (std::exception &ex) {
    sl_log_warning(LOG_TAG, "Failed to publish the Reported attribute value: %s", ex.what());
  }
}

static void {{asSnakeCaseLower label}}_cluster_cluster_revision_callback(
   attribute_store_node_t updated_node, attribute_store_change_t change)
{
  // clang-format on
  if (false == is_publish_reported_attribute_values_to_mqtt_enabled()) {
    return;
  }

  // Get the UNID and EndPoint, and prepare the basic topic
  char unid[MAXIMUM_UNID_SIZE]     = {};
  dotdot_endpoint_id_t endpoint_id = 0;
  // clang-format off
  {{#if (clusterWithoutEndpoints label)}}
  // clang-format on
  if (SL_STATUS_OK != unify_dotdot_attributes_get_unid()(updated_node, unid)) {
    return;
  }
  // clang-format off
  {{else}}
  // clang-format on
  if (SL_STATUS_OK
      != unify_dotdot_attributes_get_unid_endpoint()(updated_node,
                                                     unid,
                                                     &endpoint_id)) {
    return;
  }
  // clang-format off
  {{/if}}
  // clang-format on

  std::string base_topic = "ucl/by-unid/" + std::string(unid);
  // clang-format off
  {{#unless (clusterWithoutEndpoints label)}}
  base_topic += "/ep" + std::to_string(endpoint_id);
  {{/unless}}

  if ((change == ATTRIBUTE_CREATED) || (change == ATTRIBUTE_UPDATED)) {
    // On attribute creation, make sure to publish the attribute revision for the first time
    std::string cluster_revision_topic = base_topic + "/{{asPublicationName label}}/Attributes/ClusterRevision";
    if (uic_mqtt_count_topics(cluster_revision_topic.c_str()) == 0) {
      {{dotdot_prefix}}_{{asSnakeCaseLower label}}_publish_cluster_revision(base_topic.c_str(), {{revision}});
    }
  }

  if (change == ATTRIBUTE_DELETED) {
    // Check if we just erased the last attribute under a cluster, if yes, unretain
    // the Cluster revision too.
    if (false == dotdot_is_any_{{asSnakeCaseLower label}}_attribute_supported(unid, endpoint_id)) {
      base_topic +=  "/{{asPublicationName label}}";
      sl_log_debug(LOG_TAG, "No more attributes supported for {{label}} cluster for UNID %s Endpoint %d. Unretaining leftover topics at %s",unid, endpoint_id, base_topic.c_str());
      uic_mqtt_unretain(base_topic.c_str());
    }
  }
}

{{/if}}
{{/zcl_clusters}}


// Initialization of the component.
sl_status_t unify_dotdot_attribute_store_attribute_publisher_init()
{
  {{#zcl_clusters}}
  {{#if (supportedCluster label)}}
  {{#zcl_attributes}}
    //Desired attribute state
    attribute_store_register_callback_by_type_and_state(
      {{asSnakeCaseLower parent.label}}_cluster_publish_desired_value_callback,
      {{asAttributeIdDefine parent.label label}},
      DESIRED_ATTRIBUTE);
    //Reported attribute state
    attribute_store_register_callback_by_type_and_state(
      {{asSnakeCaseLower parent.label}}_cluster_publish_reported_value_callback,
      {{asAttributeIdDefine parent.label label}},
      REPORTED_ATTRIBUTE);
    //registering a callback when an attribute is created for publishing cluster revision
    attribute_store_register_callback_by_type(
      {{asSnakeCaseLower parent.label}}_cluster_cluster_revision_callback,
      {{asAttributeIdDefine parent.label label}});
  {{/zcl_attributes}}
  {{/if}}
  {{/zcl_clusters}}

  return SL_STATUS_OK;
}
