/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

#include <unordered_map>

/* ZigPC components */
#include "zcl_definitions.h"
#include "zcl_util.h"

/**
 * @brief Map of ZCL data type to size
 */
static const std::unordered_map<zigpc_zcl_data_type_t, size_t> zcl_data_type_size_map = {
  { ZIGPC_ZCL_DATA_TYPE_DATA8, 1 },
  { ZIGPC_ZCL_DATA_TYPE_DATA16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_DATA24, 3 },
  { ZIGPC_ZCL_DATA_TYPE_DATA32, 4 },
  { ZIGPC_ZCL_DATA_TYPE_DATA40, 5 },
  { ZIGPC_ZCL_DATA_TYPE_DATA48, 6 },
  { ZIGPC_ZCL_DATA_TYPE_DATA56, 7 },
  { ZIGPC_ZCL_DATA_TYPE_DATA64, 8 },
  { ZIGPC_ZCL_DATA_TYPE_MAP8, 1 },
  { ZIGPC_ZCL_DATA_TYPE_MAP16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_MAP24, 3 },
  { ZIGPC_ZCL_DATA_TYPE_MAP32, 4 },
  { ZIGPC_ZCL_DATA_TYPE_MAP40, 5 },
  { ZIGPC_ZCL_DATA_TYPE_MAP48, 6 },
  { ZIGPC_ZCL_DATA_TYPE_MAP56, 7 },
  { ZIGPC_ZCL_DATA_TYPE_MAP64, 8 },
  { ZIGPC_ZCL_DATA_TYPE_UINT8, 1 },
  { ZIGPC_ZCL_DATA_TYPE_UINT16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_UINT24, 3 },
  { ZIGPC_ZCL_DATA_TYPE_UINT32, 4 },
  { ZIGPC_ZCL_DATA_TYPE_UINT40, 5 },
  { ZIGPC_ZCL_DATA_TYPE_UINT48, 6 },
  { ZIGPC_ZCL_DATA_TYPE_UINT56, 7 },
  { ZIGPC_ZCL_DATA_TYPE_UINT64, 8 },
  { ZIGPC_ZCL_DATA_TYPE_INT8, 1 },
  { ZIGPC_ZCL_DATA_TYPE_INT16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_INT24, 3 },
  { ZIGPC_ZCL_DATA_TYPE_INT32, 4 },
  { ZIGPC_ZCL_DATA_TYPE_INT40, 5 },
  { ZIGPC_ZCL_DATA_TYPE_INT48, 6 },
  { ZIGPC_ZCL_DATA_TYPE_INT56, 7 },
  { ZIGPC_ZCL_DATA_TYPE_INT64, 8 },
  { ZIGPC_ZCL_DATA_TYPE_ENUM8, 1 },
  { ZIGPC_ZCL_DATA_TYPE_ENUM16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_OCTSTR16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_STRING16, 2 },
  { ZIGPC_ZCL_DATA_TYPE_EUI64, 8 },
  { ZIGPC_ZCL_DATA_TYPE_KEY128, 16 },
  { ZIGPC_ZCL_DATA_TYPE_BOOL, 1 },
  { ZIGPC_ZCL_DATA_TYPE_STRING, 1 },
  { ZIGPC_ZCL_DATA_TYPE_OCTSTR, 1 },
  { ZIGPC_ZCL_DATA_TYPE_ATTRIB_ID, 2 },
  { ZIGPC_ZCL_DATA_TYPE_STRUCT_TRANSITION_TYPE, sizeof(zigpc_zcl_transition_type_t) },
  { ZIGPC_ZCL_DATA_TYPE_CREDENTIAL_STRUCT_TYPE, sizeof(zigpc_zcl_credential_struct_t) },
};
/* TODO: Investigate following data type sizes missing from ZAP autogeneration.
 * ZIGPC_ZCL_DATA_TYPE_SEMI
 * ZIGPC_ZCL_DATA_TYPE_SINGLE
 * ZIGPC_ZCL_DATA_TYPE_DOUBLE
 * ZIGPC_ZCL_DATA_TYPE_STRING
 * ZIGPC_ZCL_DATA_TYPE_OCTSTR
 * ZIGPC_ZCL_DATA_TYPE_OCTSTR16
 * ZIGPC_ZCL_DATA_TYPE_ARRAY
 * ZIGPC_ZCL_DATA_TYPE_STRUCT
 * ZIGPC_ZCL_DATA_TYPE_SET
 * ZIGPC_ZCL_DATA_TYPE_BAG
 * ZIGPC_ZCL_DATA_TYPE_TOD
 * ZIGPC_ZCL_DATA_TYPE_DATE
 * ZIGPC_ZCL_DATA_TYPE_UTC
 * ZIGPC_ZCL_DATA_TYPE_CLUSTER_ID
 * ZIGPC_ZCL_DATA_TYPE_ATTRIB_ID
 * ZIGPC_ZCL_DATA_TYPE_BAC_OID
 * ZIGPC_ZCL_DATA_TYPE_UNK
 */

const std::unordered_map<zigpc_zcl_data_type_t, size_t> *zigpc_zcl_get_zcl_data_type_size_map(void)
{
  return &zcl_data_type_size_map;
}
