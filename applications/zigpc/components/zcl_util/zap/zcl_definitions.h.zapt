/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

/**
 * @file zcl_definitions.h
 * @defgroup {{component_zigpc_zcl_prefix}}_definitions ZigPC ZCL Definitions
 * @ingroup zigpc_zcl_util
 * @brief Contains definitions used by ZigPC in order to intrepret ZCL
 * information.
 *
 * @{
 */

{{zap_header}}

#ifndef {{asSnakeCaseUpper (component_zigpc_zcl_prefix)}}_DEFINITIONS_H
#define {{asSnakeCaseUpper (component_zigpc_zcl_prefix)}}_DEFINITIONS_H

#include "zigpc_common_zigbee.h"

#ifdef __cplusplus
extern "C" {
#endif

typedef uint32_t UTC;

/**
 * @brief ZCL data types.
 */
typedef enum {
{{#zcl_atomics}}
  {{asZigPCZclDataType name}} = {{asHex atomicId 2}},
{{/zcl_atomics}}
  // Custom data type for structs
  {{asZigPCZclDataType 'StructTransitionType'}},
  {{asZigPCZclDataType 'CredentialStructType'}}
} {{component_zigpc_zcl_prefix}}_data_type_t;

{{#zcl_enums}}
{{#if (supportedEnums label)}}
/**
 * @brief ZCL status types.
 */
typedef enum {
{{#zcl_enum_items}}
  ZIGPC_{{asDelimitedMacro parent.label}}_{{asDelimitedMacro label}} = {{asHex value 2}},
{{/zcl_enum_items}}
} zigpc_{{asSnakeCaseLower label}}_t;
{{/if}}
{{/zcl_enums}}

/**
 * @brief ZCL Global command types.
 */
typedef enum {
  ZIGPC_ZCL_GLOBAL_COMMAND_READ_ATTRIBUTES = 0x00,
  ZIGPC_ZCL_GLOBAL_COMMAND_WRITE_ATTRIBUTES = 0x02,
} zigpc_zcl_global_command_type_t;

/**
 * @brief ZCL Global command types.
 */
typedef enum {
  ZIGPC_ZCL_GLOBAL_ATTR_CLUSTER_REVISION = 0xFFFD,
} zigpc_zcl_global_attr_type_t;

/**
 * @brief ZCL Global Reporting Role Direction.
 */
typedef enum {
  ZIGPC_ZCL_GLOBAL_REPORTING_ROLE_GENERATOR = 0x00,
  ZIGPC_ZCL_GLOBAL_REPORTING_ROLE_RECIPIENT = 0x01,
} zigpc_zcl_global_reporting_role_type_t;

/**
 * @brief ZCL cluster types
 */
typedef enum {
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
  {{asZigPCZclClusterType this}} = {{asHex code 4}},
{{/if}}
{{/zcl_clusters}}
  ZIGPC_ZCL_CLUSTER_OTA_UPGRADE = 0x0019
} {{component_zigpc_zcl_prefix}}_cluster_type_t;

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_attributes}}
{{#first}}
/*****************************************************************
 *
 * ZCL attributes for {{parent.label}} cluster
 *
 *****************************************************************/

/**
 * @brief ZCL attribute types for {{parent.label}} cluster
 */
typedef enum {
{{/first}}
  {{asZigPCZclAttributeType parent this}} = {{asHex code 2}},
{{#last}}
} {{component_zigpc_zcl_prefix}}_{{asSnakeCaseLower parent.label}}_attr_type_t;

{{/last}}
{{/zcl_attributes}}
{{#zcl_commands}}
{{#first}}
/*****************************************************************
 *
 * ZCL Command support for {{parent.label}} cluster
 *
 *****************************************************************/

/**
 * @brief ZCL command types for {{parent.label}} cluster
 */
typedef enum {
{{/first}}
  {{asZigPCZclCommandType parent this}} = {{asHex code 2}},
{{#last}}
} {{component_zigpc_zcl_prefix}}_{{asSnakeCaseLower parent.label}}_command_type_t;

{{/last}}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}

{{#zcl_structs}}
{{#if (supportedStruct label)}}
/**
 * @brief Struct for {{label}}
 */
typedef struct {
{{#zcl_struct_items}}
{{#if (supportedEnums type)}}
{{ident}}{{asZigPCZclEnumType type}} {{asSnakeCaseLower label}};
{{else}}
{{ident}}{{asUnderlyingType type}} {{asSnakeCaseLower label}};
{{/if}}
{{/zcl_struct_items}}
} __attribute__((__packed__)) {{asZigPCZclStructType label}};
{{/if}}
{{/zcl_structs}}

/**
 * @brief Struct for ConfigureReportingRecord
 *
 */
typedef struct {
  uint8_t direction;
  uint16_t attribute_identifier;
  uint8_t attribute_type;
  uint16_t minimum_reporting_interval;
  uint16_t maximum_reporting_interval;
  uint32_t reportable_change;
  uint16_t  timeout_period;
} __attribute__((__packed__)) zigpc_zcl_configure_reporting_record_t;

#ifdef __cplusplus
}
#endif

#endif /* {{asSnakeCaseUpper (component_zigpc_zcl_prefix)}}_DEFINITIONS_H */

/** @} end {{component_zigpc_zcl_prefix}}_definitions */
