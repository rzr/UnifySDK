/******************************************************************************
 * # License
 * <b>Copyright 2021 Silicon Laboratories Inc. www.silabs.com</b>
 ******************************************************************************
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 *****************************************************************************/

{{zap_header}}
{{#zcl_atomics}}{{zcl_type_map_set_item this.name this.name}}{{/zcl_atomics}}
{{#zcl_enums}}{{#if type}}{{zcl_type_map_set_item this.label this.type}}{{/if}}{{/zcl_enums}}
{{#zcl_bitmaps}}{{#if type}}{{zcl_type_map_set_item this.label this.type}}{{/if}}{{/zcl_bitmaps}}
{{#after}}

// TODO: Investigate using 1 bygroup dispatch callback with ZCL types used

#include <list>
#include <vector>
#include <nlohmann/json.hpp>

// Unify shared components
#include <sl_log.h>
#include <sl_status.h>
#include <dotdot_mqtt_group_commands.h>

// ZigPC components
#include <zigpc_gateway.h>
#include <zigpc_common_zigbee.h>
#include <zcl_definitions.h>

// Internal includes
#include "zigpc_command_mapper_int.h"

static constexpr char LOG_TAG[] = "zigpc_cmdmapper";
static constexpr char LOG_FMT_INVALID_FIELDS[] = "%s::%s: Invalid fields passed in";
static constexpr char LOG_FMT_INVALID_FIELD_LIST[] = "%s::%s: Invalid %s list passed in";

extern void {{component_zigpc_cmdmapper_prefix}}_populate_write_attr_record(
  std::vector<{{component_zigpc_zcl_prefix}}_frame_data_t> &write_attr_data,
  std::list<zcl_attribute_id_t> &attr_id_list,
  std::list<zigpc_zcl_data_type_t> &attr_data_type_list,
  zcl_attribute_id_t attribute_id,
  zigpc_zcl_data_type_t attribute_data_type,
  void *attribute_data
);

{{#zcl_clusters}}
{{#if (supportedCluster label)}}
{{#zcl_attributes}}
{{#first}}
void {{component_zigpc_cmdmapper_prefix}}_bygroup_{{asSnakeCaseLower parent.label}}_write_attributes_handler(
  const dotdot_group_id_t group_id,
  {{component_dotdot_mqtt_prefix}}_{{asSnakeCaseLower parent.label}}_state_t values,
  {{component_dotdot_mqtt_prefix}}_{{asSnakeCaseLower parent.label}}_updated_state_t values_to_write
) {
  std::vector<{{component_zigpc_zcl_prefix}}_frame_data_t> write_attr_data;
  std::list<zcl_attribute_id_t> attr_id_list;
  std::list<zigpc_zcl_data_type_t> attr_data_type_list;

{{/first}}
{{#if isWritable }}
  if (values_to_write.{{asSnakeCaseLower label}} == true) {
    {{component_zigpc_cmdmapper_prefix}}_populate_write_attr_record(
      write_attr_data,
      attr_id_list,
      attr_data_type_list,
      {{asZigPCZclAttributeType parent this}},
      {{asZigPCZclDataType (zcl_type_map_get_item type)}},
      &values.{{asSnakeCaseLower label}}
    );
  }

{{/if}}
{{#last}}
  if (write_attr_data.size() > 0) {
    {{component_zigpc_cmdmapper_prefix}}_send_multicast(
      group_id,
      ZIGPC_ZCL_FRAME_TYPE_GLOBAL_CMD_TO_SERVER,
      {{asZigPCZclClusterType parent}},
      ZIGPC_ZCL_GLOBAL_COMMAND_WRITE_ATTRIBUTES,
      write_attr_data.size(),
      write_attr_data.data()
    );
  }

}
{{/last}}
{{/zcl_attributes}}



{{#zcl_commands}}
{{#if (isEqual source "server")}}
/**
 * @brief DotDot MQTT by-group handler for {{parent.label}}/{{label}} command.
 *
 * @param group_id  UCL group identifier.
{{#zcl_command_arguments}}{{#first}}
 * @param fields    Command fields data.
{{/first}}{{/zcl_command_arguments}}
 */
void {{component_zigpc_cmdmapper_prefix}}_bygroup_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_handler(
  const dotdot_group_id_t group_id{{#zcl_command_arguments}}{{#first}},
  const {{asDotDotMqttCommandFieldsType parent}} *fields
  {{/first}}{{/zcl_command_arguments}}
) {

{{! check for list argument validity}}
{{#zcl_command_arguments}}
{{#first}}
  if (fields == nullptr) {
    sl_log_warning(LOG_TAG, LOG_FMT_INVALID_FIELDS, "{{parent.label}}", "{{label}}");
  }
{{/first}}
{{#if isArray}}
  if ((fields->{{asSnakeCaseLower label}}_count > 0U) && (fields->{{asSnakeCaseLower label}} == nullptr)) {
    sl_log_warning(LOG_TAG, LOG_FMT_INVALID_FIELD_LIST, "{{parent.parent.label}}", "{{parent.label}}", "{{label}}");
    return;
  }
{{/if}}
{{/zcl_command_arguments}}

{{! Copy structs passed in}}
{{#zcl_command_arguments}}
{{#if (supportedStruct type)}}
  {{! Struct array}}
  {{#if isArray}}
  std::vector< {{asZigPCZclStructType type}} > zigpc_{{asSnakeCaseLower label}}_vec;

  for(uint8_t i = 0; i < fields->{{asSnakeCaseLower label}}_count; i++) {
    zigpc_{{asSnakeCaseLower label}}_vec.push_back({
    {{#zcl_struct_items_by_struct_name type}}
      .{{asSnakeCaseLower label}} = fields->{{asSnakeCaseLower parent.label}}[i].{{label}},
    {{/zcl_struct_items_by_struct_name}}
    });
  }
  {{! Struct non-array}}
  {{else}}
  {{asZigPCZclStructType type}} zigpc_{{asSnakeCaseLower label}} = {
    {{#zcl_struct_items_by_struct_name type}}
    {{#if (supportedEnums type)}}
    .{{asSnakeCaseLower label}} = ({{asZigPCZclEnumType type}})(int)fields->{{asSnakeCaseLower parent.label}}.{{label}},
    {{else}}
    .{{asSnakeCaseLower label}} = fields->{{asSnakeCaseLower parent.label}}.{{label}},
    {{/if}}
    {{/zcl_struct_items_by_struct_name}}
  };
  {{/if}}
{{/if}}
{{/zcl_command_arguments}}

{{! build frame using argument list}}
{{#zcl_command_arguments}}
{{#first}}
  std::vector< {{component_zigpc_zcl_prefix}}_frame_data_t > cmd_arg_list;
{{/first}}
{{! populate string types}}
{{#if (isString type)}}
  cmd_arg_list.push_back({ {{asZigPCZclDataType (zcl_type_map_get_item type)}}, fields->{{asSnakeCaseLower label}} });
{{! populate struct types}}
{{else if (supportedStruct type)}}
  {{#if isArray}}
  {{! NOTE: commands that send struct arrays do not send a 1-byte prefixed length field. This is omitted here}}
  for(uint8_t i = 0U; i < fields->{{asSnakeCaseLower label}}_count; i++) {
    cmd_arg_list.push_back({ {{asZigPCZclDataType (zcl_type_map_get_item type)}}, &zigpc_{{asSnakeCaseLower label}}_vec[i] });
  }
  {{else}}
  cmd_arg_list.push_back({ {{asZigPCZclDataType (zcl_type_map_get_item type)}}, &zigpc_{{asSnakeCaseLower label}} });
  {{/if}}
{{! populate array types}}
{{else if isArray}}
  cmd_arg_list.push_back({ ZIGPC_ZCL_DATA_TYPE_UINT8, &fields->{{asSnakeCaseLower label}}_count });
  for(uint8_t i = 0U; i < fields->{{asSnakeCaseLower label}}_count; i++) {
    cmd_arg_list.push_back({ {{asZigPCZclDataType (zcl_type_map_get_item type)}}, &fields->{{asSnakeCaseLower label}}[i] });
  }
{{! populate non-string, non-array, non-struct types}}
{{else}}
  cmd_arg_list.push_back({ {{asZigPCZclDataType (zcl_type_map_get_item type)}}, &fields->{{asSnakeCaseLower label}} });
{{/if}}
{{/zcl_command_arguments}}

  {{component_zigpc_cmdmapper_prefix}}_send_multicast(
    group_id,
    ZIGPC_ZCL_FRAME_TYPE_CMD_TO_SERVER,
    {{asZigPCZclClusterType parent}},
    {{asZigPCZclCommandType parent this}},
{{#zcl_command_arguments}}
{{#first}}
    cmd_arg_list.size(),
    cmd_arg_list.data()
{{/first}}
{{else}}
    0,
    nullptr
{{/zcl_command_arguments}}
  );

}

{{/if}}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}

sl_status_t {{component_zigpc_cmdmapper_prefix}}_mqtt_bygroup_handlers_init(void)
{
{{#zcl_clusters}}
{{#if (supportedCluster label)}}
  {{asDotDotMqttByGroupWriteAttributesCallback this}}_set({{component_zigpc_cmdmapper_prefix}}_bygroup_{{asSnakeCaseLower label}}_write_attributes_handler);
{{#zcl_commands}}
{{#if (isEqual source "server")}}
  {{asDotDotMqttByGroupCommandCallback this}}_set({{component_zigpc_cmdmapper_prefix}}_bygroup_{{asSnakeCaseLower parent.label}}_{{asSnakeCaseLower label}}_handler);
{{/if}}
{{/zcl_commands}}
{{/if}}
{{/zcl_clusters}}
  return SL_STATUS_OK;
}
{{/after}}
