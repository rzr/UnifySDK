#!/bin/sh -e
# postinst script for Unify
#
# see: dh_installdeb(1)

. /usr/share/debconf/confmodule

UIC_VAR_DIR="${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic/zpc"

UIC_CONFDIR=${CPACK_PACKAGING_INSTALL_PREFIX}/etc/uic
UIC_CONFFILE=$UIC_CONFDIR/uic.cfg

setup_uic_user() {
        if ! getent group uic >/dev/null; then
                addgroup --quiet --system uic
        fi

        if ! getent group leds >/dev/null; then
                addgroup --quiet --system leds
        fi

        if ! getent passwd uic >/dev/null; then
                adduser --quiet --system --no-create-home --ingroup uic --home "$UIC_VAR_DIR" --shell /usr/sbin/nologin uic
                usermod -a -G dialout uic
        fi

        # We need to do this separately in case the user was created by one of the other
        # Unify packages.
        if ! getent group leds | grep uic > /dev/null; then
                usermod -a -G leds uic
        fi
}

fix_permissions() {
        mkdir -p $UIC_VAR_DIR
        chown uic $UIC_VAR_DIR
}

reload_udev() {
  if type "udevadm" > /dev/null; then
    udevadm control --reload-rules || true
    udevadm trigger || true
  fi
}

enable_start_uic_zpc() {
  if type "systemctl" > /dev/null; then
    systemctl --system daemon-reload || true
    systemctl enable uic-zpc.service || true
    systemctl start uic-zpc.service || true
  fi
}

handle_conf() {
    if ! grep -q "zpc:" $UIC_CONFFILE
    then
      mkdir -p $UIC_CONFDIR
      echo "zpc:" >>  $UIC_CONFFILE
      echo "  serial: /dev/ttyUSB0" >> $UIC_CONFFILE
      echo "  rf_region: EU" >> $UIC_CONFFILE
      echo "  datastore_file: ${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic/zpc.db" >> $UIC_CONFFILE
    fi

    db_get uic-zpc/serial_port
    PORT="$RET"
    if [ "$RET" = "" ]; then
    	PORT="/dev/ttyUSB0"
    fi

    db_get uic-zpc/region
    REGION="$RET"
    if [ "$RET" = "" ]; then
    	REGION="EU"
    fi

    db_get uic-zpc/datastore_file
    DSTORE="$RET"
    if [ "$RET" = "" ]; then
    	DSTORE="${CPACK_PACKAGING_INSTALL_PREFIX}/var/lib/uic/zpc.db"
    fi

    # Update configuration file with oucome of configuration
    # This is a small state machine that can update the Unify config file, which is written in YAML
    state=""

    while IFS= read line #Read IFS https://en.wikipedia.org/wiki/Input_Field_Separators
    do
      # Set the state depending on the line read from the config file
      case "$line" in
        "zpc:" )   # State: zpc
          state="zpc"
          ;;
        " "* | "-"* )   # Lines starting with '-' or ' ' don't trigger state change.
          # Do nothing.
          ;;
        *) state="" ;;    # Set state to empty, Any unknown text, that doesn't begin with '-' or ' '
      esac
      leftside=$(echo "$line" | cut -f1 -d":")
      # STM to update entries under 'zpc:'
      case $state in
        "zpc" )
          case "$line" in
          "zpc:" )
            echo "$line" ;;                   # zpc should not be indented
          *"serial:"*)
            echo "$leftside: $PORT" ;;
          *"rf_region:"*)
            echo "$leftside: $REGION" ;;
          *"datastore_file:"*)
            echo "$leftside: $DSTORE" ;;
          *)
            echo "$line" ;;                 # Anything inside zpc we indent
          esac ;;
        *)
          echo "$line" ;;                     # Anything else we just echo the line
                          # Without IFS= , echo here would remove the leading spaces and ruin the yaml formatting
      esac
    done < "$UIC_CONFFILE" > "$UIC_CONFFILE.tmp"
    mv "$UIC_CONFFILE.tmp" "$UIC_CONFFILE"

    echo "==="
    echo "$UIC_CONFFILE new contents:"
    echo "==="
    cat "$UIC_CONFFILE"
    echo "==="

}

case "$1" in
        configure)
                handle_conf
                setup_uic_user
                fix_permissions
                reload_udev
        ;;

        abort-upgrade|abort-remove|abort-deconfigure)
        ;;

        *)
                echo "postinst called with unknown argument \`$1'" >&2
                exit 1
        ;;
esac

migrate_db() {
  DATABASE_TARGET_VERSION=3
  echo "Upgrade database to v3"
  # Database path will be taken from the configuration file
  # No need to be successful, as the database might not exist yet
  set +e
  ${CPACK_PACKAGING_INSTALL_PREFIX}/bin/zpc_database_upgrade_tool --target_version $DATABASE_TARGET_VERSION || echo "[WARN] Database upgrade to v$DATABASE_TARGET_VERSION failed. You can run it manually."
  set -e
}

# Reload AppArmor profile
APP_PROFILE="/etc/apparmor.d/usr.sbin.uic"
if [ -f "$APP_PROFILE" ] && aa-status --enabled 2>/dev/null; then
       apparmor_parser -r "$APP_PROFILE" || true
fi

#DEBHELPER#

# Enable and start UIC_ZPC daemon
enable_start_uic_zpc
migrate_db

exit 0
